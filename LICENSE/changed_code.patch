--- haskell-vim-now-vimrc.txt	2016-07-26 17:55:32.751959557 -0700
+++ .vimrc	2016-07-26 17:55:55.447958887 -0700
@@ -1,3 +1,10 @@
+"""""""""""""""""""""""""""
+" Basic Settings
+"""""""""""""""""""""""""""
+set nocompatible " Vim settings rather than Vi. Must appear first
+set history=999
+
+
 " HVN paths {{{
 " Set XDG_CONFIG_HOME/haskell-vim-now to load user's config files
 if exists($XDG_CONFIG_HOME)
@@ -25,40 +32,63 @@
 
 " General {{{
 " Use indentation for folds
-set foldmethod=indent
-set foldnestmax=5
-set foldlevelstart=99
-set foldcolumn=0
-
-augroup vimrcFold
-  " fold vimrc itself by categories
-  autocmd!
-  autocmd FileType vim set foldmethod=marker
-  autocmd FileType vim set foldlevel=0
-augroup END
+" set foldmethod=indent
+" set foldnestmax=5
+" set foldlevelstart=99
+" set foldcolumn=0
+
+" augroup vimrcFold
+"   " fold vimrc itself by categories
+"   autocmd!
+"   autocmd FileType vim set foldmethod=marker
+"   autocmd FileType vim set foldlevel=0
+" augroup END
 
 " Sets how many lines of history VIM has to remember
-set history=700
+set history=999
 
-" Set to auto read when a file is changed from the outside
-set autoread
 
-" With a map leader it's possible to do extra key combinations
-" like <leader>w saves the current file
-if ! exists("mapleader")
-  let mapleader = ","
-endif
+"""""""""""""""""""""""""""
+" Keybindings
+"""""""""""""""""""""""""""
+
+" See Plugin Settings for additional keybindings
+let g:mapleader = "\<Space>"
+
+nnoremap <leader>f :w<CR>
+nnoremap <leader>n :noh<CR>
+nnoremap <leader>b :bd<CR>
+nnoremap <leader>q :q<CR>
+nnoremap <leader>c :
+" nnoremap <leader>p "+p
+nnoremap <leader>P "+P
+" nnoremap <leader>y "+y
+nnoremap <leader>s :so ~/.vimrc<CR>
+nnoremap <leader>g :gui<CR>
 
-if ! exists("g:mapleader")
-  let g:mapleader = ","
-endif
+" Copy and paste to os clipboard
+nmap <leader>y "*y
+vmap <leader>y "*y
+nmap <leader>d "*d
+vmap <leader>d "*d
+nmap <leader>p "*p
+vmap <leader>p "*p
+
+" Window management
+nnoremap <leader>t :tabnew 
+nnoremap <leader>h :sp 
+nnoremap <leader>v :vsplit 
+nnoremap <leader>w <C-w>
+
+"split navigations
+nnoremap <C-J> <C-W><C-J>
+nnoremap <C-K> <C-W><C-K>
+nnoremap <C-L> <C-W><C-L>
+nnoremap <C-H> <C-W><C-H>
 
 " Leader key timeout
 set tm=2000
 
-" Allow the normal use of "," by pressing it twice
-noremap ,, ,
-
 " Use par for prettier line formatting
 set formatprg=par
 let $PARINIT = 'rTbgqR B=.,?_A_a Q=_s>|'
@@ -69,19 +99,10 @@
 " Find custom built hasktags, codex etc
 let $PATH = expand(hvn_stack_bin) . ':' . $PATH
 
-" Kill the damned Ex mode.
-nnoremap Q <nop>
-
-" Make <c-h> work like <c-h> again (this is a problem with libterm)
-if has('nvim')
-  nnoremap <BS> <C-w>h
-endif
-
-" }}}
-
-" vim-plug {{{
 
-set nocompatible
+"""""""""""""""""""""""""""
+" Plugins
+"""""""""""""""""""""""""""
 
 if has('nvim')
   call plug#begin('~/.config/nvim/bundle')
@@ -90,7 +111,8 @@
 endif
 
 " Support bundles
-Plug 'jgdavey/tslime.vim'
+Plug 'epeli/slimux'
+" Plug 'jgdavey/tslime.vim'
 Plug 'Shougo/vimproc.vim', { 'do': 'make' }
 Plug 'ervandew/supertab'
 Plug 'benekastah/neomake'
@@ -103,10 +125,11 @@
 Plug 'int3/vim-extradite'
 
 " Bars, panels, and files
-Plug 'scrooloose/nerdtree'
-Plug 'bling/vim-airline'
-Plug 'ctrlpvim/ctrlp.vim'
+Plug 'vim-airline/vim-airline'
+Plug 'vim-airline/vim-airline-themes'
 Plug 'majutsushi/tagbar'
+Plug 'tpope/vim-vinegar' " use `-`, `.`, `cg`, `lcd`, `~`
+Plug 'Shougo/unite.vim'
 
 " Text manipulation
 Plug 'vim-scripts/Align'
@@ -115,6 +138,7 @@
 Plug 'godlygeek/tabular'
 Plug 'michaeljsmith/vim-indent-object'
 Plug 'easymotion/vim-easymotion'
+Plug 'tpope/vim-surround'
 
 " Allow pane movement to jump out of vim into tmux
 Plug 'christoomey/vim-tmux-navigator'
@@ -127,6 +151,10 @@
 Plug 'Twinside/vim-hoogle', { 'for': 'haskell' }
 Plug 'mpickering/hlint-refactor-vim', { 'for': 'haskell' }
 
+" Elm
+
+Plug 'lambdatoast/elm.vim'
+
 " Colorscheme
 Plug 'vim-scripts/wombat256.vim'
 
@@ -216,32 +244,15 @@
 " }}}
 
 " Colors and Fonts {{{
-
-try
-  colorscheme wombat256mod
-catch
-endtry
-
-" Adjust signscolumn to match wombat
-hi! link SignColumn LineNr
+colorscheme desert
 
 " Use pleasant but very visible search hilighting
-hi Search ctermfg=white ctermbg=173 cterm=none guifg=#ffffff guibg=#e5786d gui=none
+" hi Search ctermfg=white ctermbg=173 cterm=none guifg=#ffffff guibg=#e5786d gui=none
 hi! link Visual Search
 
-" Match wombat colors in nerd tree
-hi Directory guifg=#8ac6f2
-
-" Searing red very visible cursor
-hi Cursor guibg=red
-
 " Use same color behind concealed unicode characters
 hi clear Conceal
 
-" Don't blink normal mode cursor
-set guicursor=n-v-c:block-Cursor
-set guicursor+=n-v-c:blinkon0
-
 " Set extra options when running in GUI mode
 if has("gui_running")
   set guioptions-=T
@@ -261,7 +272,8 @@
 set ffs=unix,dos,mac
 
 " Use large font by default in MacVim
-set gfn=Monaco:h19
+" set gfn=Monaco:h19
+set guifont=monospace\ 13
 
 " Use powerline fonts for airline
 if !exists('g:airline_symbols')
@@ -275,19 +287,9 @@
 " Files, backups and undo {{{
 
 " Turn backup off, since most stuff is in Git anyway...
-set nobackup
-set nowb
-set noswapfile
-
-" Source the vimrc file after saving it
-augroup sourcing
-  autocmd!
-  if has('nvim')
-    autocmd bufwritepost init.vim source $MYVIMRC
-  else
-    autocmd bufwritepost .vimrc source $MYVIMRC
-  endif
-augroup END
+" set nobackup
+" set nowb
+" set noswapfile
 
 " Open file prompt with current path
 nmap <leader>e :e <C-R>=expand("%:p:h") . '/'<CR>
@@ -295,29 +297,29 @@
 " Show undo tree
 nmap <silent> <leader>u :MundoToggle<CR>
 
-" Fuzzy find files
-nnoremap <silent> <Leader><space> :CtrlP<CR>
-let g:ctrlp_max_files=0
-let g:ctrlp_show_hidden=1
-let g:ctrlp_custom_ignore = { 'dir': '\v[\/](.git|.cabal-sandbox|.stack-work)$' }
-
 " }}}
 
 " Text, tab and indent related {{{
 
-" Use spaces instead of tabs
-set expandtab
+" Prevent Vim from adding two spaces after a period.
+" See also: http://stackoverflow.com/questions/4760428/how-can-i-make-vims-j-and-gq-commands-use-one-space-after-a-period
+set nojoinspaces
 
 " Be smart when using tabs ;)
 set smarttab
 
-" 1 tab == 2 spaces
-set shiftwidth=2
-set tabstop=2
-
-" Linebreak on 500 characters
-set lbr
-set tw=500
+set softtabstop=4
+set shiftwidth=4
+set tabstop=4
+set expandtab " Spaces instead of tabs
+autocmd FileType ruby setlocal shiftwidth=2 tabstop=2 softtabstop=2
+autocmd FileType jade setlocal shiftwidth=2 tabstop=2 softtabstop=2
+autocmd FileType yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2
+autocmd FileType elixir setlocal shiftwidth=2 tabstop=2 softtabstop=2
+
+" " Linebreak on 500 characters
+" set lbr
+" set tw=500
 
 set ai "Auto indent
 set si "Smart indent
@@ -328,13 +330,6 @@
 let g:haskell_conceal_enumerations = 1
 let hscoptions="ùêíùêìùêÑùêåxRtBùîªw"
 
-" Copy and paste to os clipboard
-nmap <leader>y "*y
-vmap <leader>y "*y
-nmap <leader>d "*d
-vmap <leader>d "*d
-nmap <leader>p "*p
-vmap <leader>p "*p
 
 " }}}
 
@@ -358,14 +353,14 @@
 noremap <c-j> <c-w>j
 noremap <c-l> <c-w>l
 
-" Disable highlight when <leader><cr> is pressed
-" but preserve cursor coloring
-nmap <silent> <leader><cr> :noh\|hi Cursor guibg=red<cr>
-augroup haskell
-  autocmd!
-  autocmd FileType haskell map <silent> <leader><cr> :noh<cr>:GhcModTypeClear<cr>
-  autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
-augroup END
+" " Disable highlight when <leader><cr> is pressed
+" " but preserve cursor coloring
+" nmap <silent> <leader><cr> :noh\|hi Cursor guibg=red<cr>
+" augroup haskell
+"   autocmd!
+"   autocmd FileType haskell map <silent> <leader><cr> :noh<cr>:GhcModTypeClear<cr>
+"   autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
+" augroup END
 
 " Return to last edit position when opening files (You want this!)
 augroup last_edit
@@ -405,9 +400,6 @@
 " delete buffer without closing pane
 noremap <leader>bd :Bd<cr>
 
-" fuzzy find buffers
-noremap <leader>b<space> :CtrlPBuffer<cr>
-
 " Neovim terminal configurations
 if has('nvim')
   " Use <Esc> to escape terminal insert mode
@@ -483,36 +475,15 @@
 
 " }}}
 
-" Slime {{{
 
-vmap <silent> <Leader>rs <Plug>SendSelectionToTmux
-nmap <silent> <Leader>rs <Plug>NormalModeSendToTmux
-nmap <silent> <Leader>rv <Plug>SetTmuxVars
+" Slimux
+map <C-c><C-s> :SlimuxREPLConfigure<CR>
+nmap <C-c><C-s> :SlimuxREPLConfigure<CR>
+map <C-c><C-c> :SlimuxREPLSendLine<CR>
+vmap <C-c><C-c> :SlimuxREPLSendSelection<CR>
+map <C-c><C-b> :SlimuxREPLSendBuffer<CR>
+vmap <C-c><C-b> :SlimuxREPLSendBuffer<CR>
 
-" }}}
-
-" NERDTree {{{
-
-" Close nerdtree after a file is selected
-let NERDTreeQuitOnOpen = 1
-
-function! IsNERDTreeOpen()
-  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
-endfunction
-
-function! ToggleFindNerd()
-  if IsNERDTreeOpen()
-    exec ':NERDTreeToggle'
-  else
-    exec ':NERDTreeFind'
-  endif
-endfunction
-
-" If nerd tree is closed, find current file, if open, close it
-nmap <silent> <leader>f <ESC>:call ToggleFindNerd()<CR>
-nmap <silent> <leader>F <ESC>:NERDTreeToggle<CR>
-
-" }}}
 
 " Alignment {{{
 
@@ -721,3 +692,11 @@
 endif
 
 " }}}
+"""""""""""""""""""""""""""
+" Plugin Settings
+"""""""""""""""""""""""""""
+
+" Airline
+set laststatus=2
+let g:airline_powerline_fonts = 1
+let g:airline_theme='base16'
